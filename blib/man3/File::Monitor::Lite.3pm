.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Monitor::Lite 3"
.TH File::Monitor::Lite 3 "2011-04-01" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Monitor::Lite \- Perl extension for blah blah blah
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use File::Monitor::Lite;
\&  
\&  my $monitor = File::Monitor::Lite\->new (
\&      in => \*(Aq.\*(Aq,
\&      name => \*(Aq*.html\*(Aq,
\&  );
\&
\&  while ($monitor\->check() and sleep 1){
\&      my @deleted_files = $monitor\->deleted;
\&      my @modified_files = $monitor\->modified;
\&      my @created_files = $monitor\->created;
\&      my @observing_files = $monitor\->observed;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is another implementaion of File::Monitor. While File::Monitor cannot detect file creation (unless you declare file name first), I use File::Find::Rule to rescan files every time when \f(CW$monitor\fR\->\fIcheck()\fR is executed. To use this module, just follow synopsis above.
.PP
Currently one cannot change file observing rules. To do so, create another monitor object with new rules.
.PP
.Vb 12
\&    $m1=File::Monitor::Lite\->new(
\&        name => \*(Aq*.html\*(Aq,
\&        in => \*(Aq.\*(Aq,
\&    );
\&    $m1\->check();
\&    #blah...
\&    $m2=File::Monitor::Lite\->new(
\&        name => \*(Aq*.css\*(Aq,
\&        in => \*(Aq.\*(Aq,
\&    );
\&    $m2\->check();
\&    #blah...
.Ve
.SH "INTERFACE"
.IX Header "INTERFACE"
.ie n .IP """ new ( args ) """ 4
.el .IP "\f(CW new ( args ) \fR" 4
.IX Item " new ( args ) "
Create a new \f(CW\*(C`File::Monitor::Lite\*(C'\fR object.
.Sp
.Vb 4
\&    my $monitor = File::Monitor::Lite\->new(
\&        in => \*(Aq.\*(Aq,
\&        name => \*(Aq*.mp3\*(Aq,
\&    );
.Ve
.Sp
The syntax is inherited from File::Find::Rule. It will applied on File::Find::Rule as
.Sp
.Vb 4
\&    File::Find::Rule
\&        \->file()
\&        \->name(\*(Aq*.mp3\*(Aq)
\&        \->in(\*(Aq.\*(Aq);
.Ve
.Sp
As described in File::Find::Rule, name can be globs or regular expressions.
.Sp
.Vb 4
\&    name => \*(Aq*.pm\*(Aq,                     # a simple glob
\&    name => qr/.+\e.pm$/,                # regex
\&    name => [\*(Aq*.mp3\*(Aq, qr/.+\e.ogg$/],    # array of rules
\&    name => @rules,
.Ve
.ie n .IP """ check() """ 4
.el .IP "\f(CW check() \fR" 4
.IX Item " check() "
Check if any file recognized by File::Find::Rule has changed (created, modified, deleted.) The usage is simple:
.Sp
.Vb 1
\&    $monitor\->check();
.Ve
.ie n .IP """ created """ 4
.el .IP "\f(CW created \fR" 4
.IX Item " created "
Returns an array of file names which has been created since last check.
.ie n .IP """ modified """ 4
.el .IP "\f(CW modified \fR" 4
.IX Item " modified "
Returns an array of file names which has been modified since last check.
.ie n .IP """ deleted """ 4
.el .IP "\f(CW deleted \fR" 4
.IX Item " deleted "
Returns an array of file names which has been deleted since last check.
.ie n .IP """ observed """ 4
.el .IP "\f(CW observed \fR" 4
.IX Item " observed "
Returns an array of file names which monitor is observing at.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Find::Rule, File::Monitor
.SH "AUTHOR"
.IX Header "AUTHOR"
dryman, <idryman@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011 by dryman
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.
